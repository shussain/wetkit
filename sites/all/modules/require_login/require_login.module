<?php
/**
 * @file
 * require_login.module
 */

define('REQUIRE_LOGIN_DEFAULT_MESSAGE', 'You must login to use this site.');

/**
 * Implements hook_menu().
 */
function require_login_menu() {
  $items['admin/config/system/require-login'] = array(
    'title' => 'Require Login',
    'description' => 'Configure Require Login settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('require_login_admin_settings'),
    'file' => 'require_login.admin.inc',
    'access arguments' => array('administer require login'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function require_login_permission() {
  return array(
    'administer require login' => array(
      'title' => t('Administer Require Login'),
      'description' => t('Customize require login configurations.'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function require_login_init() {

  // Check user authentication status. Non-authenticated visitors will
  // automatically be redirected to /user/login (OR custom configured
  // user login path). Display customizable message to user stating
  // authentication requirements.
  if (!require_login_authcheck()) {
    $query = array('destination' => $_GET['q']);

    // Display access denied message.
    $deny_message = filter_xss_admin(trim(variable_get('require_login_deny_message', REQUIRE_LOGIN_DEFAULT_MESSAGE)));
    drupal_set_message(t($deny_message), 'warning');

    // Exclude external PHP scripts from destination query.
    if (preg_match('/^.*\.php$/i', request_uri())) {
      $query = array();
    }

    // Prepare authentication redirect path.
    $redirect = array(
      'path' => '/user/login',
      'query' => $query,
    );
    if ($auth_path = filter_xss_admin(trim(variable_get('require_login_auth_path', '')))) {
      $redirect = drupal_parse_url($auth_path);
    }

    drupal_goto(ltrim($redirect['path'], ''), array(
      'query' => isset($redirect['query']) ? $redirect['query'] : array(),
      'fragment' => isset($redirect['fragment']) ? $redirect['fragment'] : '',
    ));
  }
}

/**
 * Checks current user authentication.
 *
 * @return boolean
 *   Returns TRUE if authenticated and FALSE otherwise.
 */
function require_login_authcheck() {
  global $base_path, $base_url;
  $path = '/'. drupal_get_path_alias($_GET['q']);

  // Isolate request path from subdirectory when present.
  $raw_uri = request_uri();
  if ($base_path != '/') {
    $current_uri = '/'. str_replace($base_path, '', $raw_uri);
  }
  else {
    $current_uri = $raw_uri;
  }

  // Detect PHP script running Drupal bootstrap.
  if (preg_match('/^.*\.php$/i', $raw_uri)) {
    $path = $base_path . trim($current_uri, '/');
  }

  // Compare current URL with customizable excluded paths. Returns TRUE when
  // at least one excluded path matches the current page path. Also includes
  // custom configured user login path with exclusions.
  $exclude_paths = explode(PHP_EOL, variable_get('require_login_excluded_paths', ''));
  foreach ($exclude_paths as $key => $exclude_path) {
    $exclude_paths[$key] = trim($exclude_path);
    if ($exclude_paths[$key] == '<front>') {
      $exclude_paths[$key] = '/'. drupal_get_path_alias(variable_get('site_frontpage', 'node'));
    }
  }
  if ($auth_path = filter_xss_admin(trim(variable_get('require_login_auth_path', '')))) {
    $auth_path = drupal_parse_url($auth_path);
    $exclude_paths[] = trim($auth_path['path']);
  }
  if (drupal_match_path($path, implode(PHP_EOL, $exclude_paths))) {
    return TRUE;
  }

  // Various checks to determine exceptions for current page. Returns TRUE
  // when at least one check has evaluated as TRUE.
  $checks = array(
    (user_is_logged_in()), // Authentication
    (variable_get('maintenance_mode', 0)), // Maintenance Mode
    (isset($_SESSION['openid'])), // OpenID
    (preg_match('/^\/cron.php/i', $current_uri)), // Cron
    (preg_match('/\/update.php/i', request_uri())), // Update
    (preg_match('/\/install.php/i', request_uri())), // Install
    (arg(0) == 'user' && (!arg(1) || !is_numeric(arg(1)))), // User Pages
    (function_exists('drupal_is_cli') && drupal_is_cli()), // Drush
  );
  foreach ($checks as $check) {
    if ($check) {
      return TRUE;
    }
  }

  // Return FALSE when checks have all passed.
  return FALSE;
}
