<?php
/**
 * @file
 * Code for the NHPD search.
 * This module needs a paage with path of nhpd_search, which contains a solr index view pane 
 * and the facets of the index.
 */

 /**
 * Implements hook_form_alter().
 */
 
function nhpd_search_form_alter(&$form, &$form_state, $form_id) {
  $search_forms=array('custom_search_blocks_form_1', 'search_block_form');
  //dpm($form_id);
  if (in_array($form_id, $search_forms)) {
    //dpm($form_state['input']);
	$search_terms = isset($form_state['input'][$form_id])?$form_state['input'][$form_id] : null;
	//dpm($search_terms);
	$setting=variable_get('nhpd_search_page_path', array('path'=>'nnhpd_search', 'type' => 'ctool'));
    $path=variable_get('nhpd_search_page_path','nhpd_search');
	$type=variable_get('nhpd_search_page_type','ctool');
	if ($path) {
        if ($search_terms){
			if($type=='ctool'){
				drupal_goto($path, array('query'=>array('search_api_views_fulltext'=>$search_terms)));
			}
			else{
				drupal_goto("$path/$search_terms");
			}
		}
		
    }
  }
}
function nhpd_search_menu() {

  $items = array();
  $items['admin/config/nnhpd'] = array(
    'title' => 'NNHPD Custom Settings',
    'description' => 'Settings for NNHPD custom modudles',
    // 'position' and 'weight' can be used to place
    // the group in the the parent overview (admin/config).
    'position' => 'right',
    'weight' => -20,
    'access arguments' => array('access administration pages'),
    // This renders the group overview.
    'page callback' => 'system_admin_menu_block_page',
    // 'file' and 'file path' are required for the
    // 'system_admin_menu_block_page' callback.
    'file' => 'system.admin.inc', 
    'file path' => drupal_get_path('module','system'),
	
  );

  $items['admin/config/nnhpd/nnhpd_search'] = array(
    'title' => 'NNHPD Search Setting',
    'description' => 'This module redirects the original search block to page manager page which contains 1) a view content pane which is setted to do fulltext search on the search API index, and 2) a pane contains facets of the index. This setting is to set the path of the page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nhpd_search_admin'),
    'access arguments' => array('administer nnhpd_search settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}
function nhpd_search_permission() {
  return array(
    'administer nnhpd_search' => array(
      'title' => t('Administer NHPD Search'),
      'description' => t('Perform administration tasks for NHPD Search.'),
    ),
  );
}
function nhpd_search_admin() {
  $form = array();
  if (!module_exists('search_api_page')){
	  $form['warning'] = array(
		'#type' => 'item',
		'#markup' => t('This setting requires the module Search API Page(search_api_page to be installed and enabled. Please install and enable the module.' ),
		'#attributes' => array('alert', 'alert_block', 'error'),
	  );
	  return $form;
  }
  //$setting=variable_get('nhpd_search_page_path', array('path'=>'nnhpd_search', 'type' => 'ctool'));
  $search_path=variable_get('nhpd_search_page_path','nhpd_search');
  $type=variable_get('nhpd_search_page_type','ctool');
  
  $form['nhpd_search_page_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Search page path'),
    '#default_value' => $search_path,
    '#description' => t("The path of the search API page, ctool Page"),
    '#required' => TRUE,
  );
  $form['nhpd_search_page_type'] = array(
    '#type' => 'radios',
    '#title' => t('Search page type'),
    '#default_value' => $type,
	'#options'=>array('ctool'=>'CTool page', 'search_api_page' =>'Search API Page'),
    '#description' => t("The path of the search API page, ctool Page"),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function nhpd_search_admin_validate($form, &$form_state) {
  $path = $form_state['values']['nhpd_search_page_path'];
  $type = $form_state['values']['nhpd_search_page_type'];
  $error = '';
  if ($type == 'ctool'){
	  $tasks = page_manager_get_tasks();
	  $page_name = null;
	  $page_exists = false;
	  $enabled = true;
	  foreach($tasks as $task_name => $task){
		  //dpm($task_name);
		  if (isset($task['subtasks']) and $task['subtasks'] and $task['name'] == 'page' ){
			  $subtasks=page_manager_get_task_subtasks($task);
			  foreach($subtasks as $subtask){
				  //dpm($subtask);
				  if ($subtask['subtask']->path==$path and $subtask['subtask']->task=='page'){
					  $page_exists = true;
					  $page_name = $subtask['subtask']->admin_title . '(' . $subtask['subtask']->name .')';
					  if ($subtask['disabled']){
						  $enabled = false;
					  }
					  break 2;
					}
				}
		  }
		  else{
			if ($task['path']==$path and $task['task type']=='page'){
			  $page_exists = true;
			  $name = $task['admin title'] . '(' . $task_name .')';
			  if ($task['disabled']){
				  $enabled = false;
			  }
			  break;
			}
		  }
	  }
	  
	  if (!$page_exists){
		  $error = "Page with this path $path does not exist. Please create the page.";
	  }
	  else if(!$enabled){
		  $error = "Page $name exists but is not enabled. Please enable the page.";
	  }
  }
  elseif($type=='search_api_page'){
	  $result = db_select('search_api_page', 's')
			->fields('s', array('name', 'description','enabled'))
			->condition('status' ,'1')
			->condition('path' ,$path)
			->execute()
			->fetchAll();
		if (empty($result)){
			$error ="Search API Page with this path $path does not exist. Please create the page.";
		}
		else{
			if ($result[0]->enabled==0){
				$error ="Search API Page with this path $path is not enabled. Please enable the page.";
			}
		}
  }
  if ($error){
	  form_set_error('nhpd_search_page_path', $error);
  }
}